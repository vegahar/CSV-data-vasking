Opplegg F# .NET-forum

==========stock price statoil visualized=================
namespace lol

open FSharp.Data
open FSharp.Charting
open System.Windows.Forms
open System

module lol =
    Application.EnableVisualStyles()
    Application.SetCompatibleTextRenderingDefault false

    [<Literal>]
    let url = "http://ichart.finance.yahoo.com/table.csv?s=STO"

    type Statoil = CsvProvider<url, CacheRows=false>

    let stocks = Statoil.GetSample()

    let chart =
        Chart.Line([ for row in stocks.Rows -> row.Date, row.Open ])


    [<EntryPoint>]
    [<STAThread>]
    let main argv =
        Application.Run(chart.ShowChart())
        0


============== more stock prizes visualized ========
namespace lol

open FSharp.Data
open FSharp.Charting
open System.Windows.Forms
open System

module lol =
    Application.EnableVisualStyles()
    Application.SetCompatibleTextRenderingDefault false

    [<Literal>]
    let url = "http://ichart.finance.yahoo.com/table.csv?s=STO"

    [<Literal>]
    let url1 = "http://ichart.finance.yahoo.com/table.csv?s=DNB"

    [<Literal>]
    let url2 = "http://ichart.finance.yahoo.com/table.csv?s=TEL"

    type Statoil = CsvProvider<url, CacheRows=false>

    let statoil = Statoil.GetSample()

    type Dnb = CsvProvider<url1, CacheRows=false>

    let dnb = Dnb.GetSample()

    type Telenor = CsvProvider<url2, CacheRows=false>

    let telenor = Telenor.GetSample()

    let chart =
        Chart.Combine([ Chart.Line([ for row in statoil.Rows -> row.Date, row.Open ])
                        Chart.Line([ for row in dnb.Rows -> row.Date, row.Open ])
                        Chart.Line([ for row in telenor.Rows -> row.Date, row.Open ]) ])

    [<EntryPoint>]
    [<STAThread>]
    let main argv =
        Application.Run(chart.ShowChart())
        0


========= using maps ===================================
open FSharp.Data
open System

let urlBase = "http://ichart.finance.yahoo.com/table.csv?s="
let companyStockNames = [ "STO"; "DNB"; "TEL" ]
let companyStockUrl company : string = urlBase + company
let literals = List.map companyStockUrl companyStockNames

for lit in literals do
    printfn "%s" (lit)

let readCsvUrl (url : string) = CsvFile.Load(url).Cache()
let csvFiles = List.map readCsvUrl literals

let firstResult =
    csvFiles
    |> Seq.map (fun file -> file.Rows)
    |> Seq.map (fun rows -> Seq.head rows)

for a in firstResult do
    printfn "%s" (a.GetColumn("High"))

[<EntryPoint>]
let main argv = 0

================== types ======================
open System
open FSharp.Data
open FSharp.Data.CsvExtensions

type Stock =
    { date : DateTime
      openn : float
      high : float
      low : float
      close : float
      volume : float }

let csv = CsvFile.Load("http://ichart.finance.yahoo.com/table.csv?s=AAPL")
let headerRow = csv.Headers
let rows = csv.Rows

let mapRowToStock (row : CsvRow) =
    { date = row?Date.AsDateTime()
      openn = row?Open.AsFloat()
      high = row?High.AsFloat()
      low = row?Low.AsFloat()
      close = row?Close.AsFloat()
      volume = row?Volume.AsFloat() }

let stocks = Seq.map mapRowToStock rows

for stock in stocks do
    printfn "%A" (stock.GetType().Name)

//Date,Open,High,Low,Close,Volume,Adj Close

=====================================

open System
open FSharp.Data
open FSharp.Data.CsvExtensions

type Close = float

type Open = float

type Stock =
    { date : DateTime
      openn : Open
      high : float
      low : float
      close : Close
      volume : float }

type ClassifiedStock =
    | Buy
    | Sell

let classifyStock (stock : Stock) : ClassifiedStock =
    if stock.close <= stock.openn then Buy
    else Sell

let csv = CsvFile.Load("http://ichart.finance.yahoo.com/table.csv?s=AAPL")
let headerRow = csv.Headers
let rows = csv.Rows

let mapRowToStock (row : CsvRow) = 
    { date = row?Date.AsDateTime()
      openn = row?Open.AsFloat()
      high = row?High.AsFloat()
      low = row?Low.AsFloat()
      close = row?Close.AsFloat()
      volume = row?Volume.AsFloat() }

let stocks = Seq.map mapRowToStock rows
let classifiedStocks = Seq.map classifyStock stocks

let matchStock (stock : ClassifiedStock) =
    match stock with
    | Buy -> "Buy buy!!"
    | Sell -> "Sell sell!!"

for stock in classifiedStocks do
    printfn "%A" (matchStock stock)
